Namaste Node.js

#2

Node.js philosphy – js can run outside the browser 
 
Node.js is written in C++  
 
Node.js is a C++ applicatoin with V8 embeddd into it 
 
V8 can be embedded into any C++ programme 
 
What V8 does?  
executes JS code 
 
Cycle -> JS Code ------------------> V8 ------------------------> Machine understands and executes the code 
	                 Converts the code to machine level code 
	 
Inside a server --------> Inside Node.Js written in C++ -----------> V8 written in C++ 

V8 is a js engine - that follows ECMASCRIPT standards 

ECMASCRIPT is a standard for scripting languages 

ecmascript standard is folowed by JS, Actionscript and many other languages

========================================================================================================================

#3

NVM - node version manager

node -v -----> check version of node.js
npm -v ------> version of node package manager

REPL ---> Read Evaluate Print Loop --------> enter into REPL mode by typing node in terminal

Node.js is js runtime environment built on V8 engine
Node.js ----> V8 engine + superpowers

global object in browser accessible by - 
	- window
	- global
	- self
	- frames   
	- global is not defined in browser ------------- what are webworkers
global object in node js accessible by - 
	- global 
this logs - empty object in node js 

- global object is not part of V8 engine 
- global object is part of node.js 
- global object has setTimeout, setInterval 

globalThis - points to global object in every environment

========================================================================================================================

#4

to execute a node app, we give node and then entry point the file name ----- node app.js

require function - including a module inside another module
- require any file or module another
- require runs the entire file on the spot
- modules by default protects the internals of files - protects funcitons and variables from leaking
- to use the functions and variables export and import
    - whatever we return form exports will be returned by the requirefunciton in another file
	- export multiple things from module by exporting objects

- this pattern of importing and exporting is called - COMMON JS MODULES (cjs)
	- by default cjs is enabled
	- module.exports from modules/ files
	- require() 
	- old way 
	- works in synchronous way - until and unless the file is loaded from require the below code won't work, blocks.
	- code is run in non-strict mode
- ES Modules (mjs) - another pattern of import and export - commonly used in react and angular
	- explicitly define in package json - type : module
	- need to specify extension name in this imo - without .js extension throws error
	- export function from files/ modules
	- import from whatever file
	- new way - and would become standard way of exporting and importing
	- async way available in ES6 modules
	- strict mode is default

- module.exports is an empty object
	- when making a folder a module by requireing files from that folder in it's indes.js then we can export it.
	- also no need to specify the indes.js file name in the extension when reqire from folder
	- whatevr u export from indes.js from a folder it can be required without the indes.js extension
- module is a collectoin of js code which is private to itself, and can be required when needed by anywhere

 ========================================================================================================================

#5 Diving into the Nodejs github repo

all the code inside a module is wrapped into a function and then executed, just the way block scope works in js.
	- this is the reason why we cannot access variables and funcitons of another module unless it's required and exported
	- when we call require and give it a path - all this happens
	- also that function is IIFE (immedietly invoked function expression)
	- keeps variables and functions inside safe and private 
- How are functions and variables private in different modules?
	- IIFE and require statement - IIFE wraps the module code 
- How do u get access to module.export?
	- when the file/module is wrapped inside a function IIFE - that fucntion has module as a parameter
	- nodejs passes modules and requires as one of the parameters to the IFFE in which the code is wrapper
	
five step mechanish of require	
	1. Resolving the module 
		- can be ./localpath, .json, node:modules	
	2. Loading the module
		- load the file content according to file type
	3. Compile
		- Wraps inside an IFFE - wrapsafe as in node open source code 	
		- string concatination - see the image for refernece
 			- how node.js wraps files - https://imgur.com/a/wrapping-inside-iffe-20lzsXF
	4. Code evaluation
		- in this step - module.exports is returned 
	5. Caching
		- now the module is cached, not to be loaded again and again

the js code is not directly passed to V8, it's wrapped inside IFFE and then passed to V8

 ========================================================================================================================

#6 - libuv async IO

- Node.js - event-driven architechture - asynchronous I/O 
	- js being synchronous single threaded language, executes a js file code line by line
	- thread - in os, thread is like a seperate container which runs any process/ application 
	- single thread and v8 engine is running on it
	- js by itself is synchronous but with superpowers Node becomes asynchronous - node can perform asyn tasks

- refer to working of js in js notes - reference image - https://imgur.com/a/js-internal-working-node-lecture-JHn5ZZJ
- whenever we run any js code
	- code is executed in call stack 
	- a global execution context is created and pushed in call stack 
	- code runs line by line in synchronous way
	- variables and function stored in memory heap
	- js engine also has garbage collector, which collects unused variables funcitions, clears memory
		- in low level languages - we need to allocate memory and reallocate is - in js it's managed by garbage collector 
	- function execution context is pushed in stack, now the function code is running in this function context.

- js engine with supoerpowers provided using libuv 
	- image reference - https://imgur.com/a/node-js-using-lubuv-superpowers-heL49hI
	- js engine cannot connect/communicate to file system, database, servers, timers, and more 
	- with the help of libuv, js engine can do all this stuff.
	- libuv can make an api call, can read the files, can make connection to db and gets the response and give it back to js engine
		- v8 engine offloads the tasks to libuv
	- with libuv asynchronous I/O is made simple - libuv is a C code - v8 is C++ code 
		- image reference - https://imgur.com/a/v8-libuv-relation-VKsc5lX

- Nodejs is async - js is synchronous - v8 js engine is synchronous - with libuv V8 is async called node js
- image for reference - https://ibb.co/cxSn0P7
- js engine V8 resolves everything quickly - goes to call stack GEC is created - function runs 
- synchronous tasks are performed - when any asynchronous task is performed
	- it's pushed to libuv and js engine moves to next line
	- and completes execution - then libuv after resolving that task - returns the response to js engine
	- then function context is created in js engine call stack and resolved.
- Node js can do async I/O 
- node js is non blocking I/O - as it's not blocking main thread - mian thread being the js engine 
	- which was not affected by api calls or anything - as it was pushed to libuv
	- don't block the mian thread 




	


	



	
	




